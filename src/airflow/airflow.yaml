apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-webserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-webserver
  template:
    metadata:
      labels:
        app: airflow-webserver
    spec:
      initContainers:
      - name: airflow-db-init
        image: ehddnr/airflow:1.1.0
        command: ["airflow", "db", "init"]
        env:
        - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              name: airflow-secret
              key: airflow-core-sql-alchemy-conn
      - name: airflow-users-create
        image: ehddnr/airflow:1.1.0
        command: ["airflow", "users", "create", "-u", "admin", "-p", "admin", "-r", "Admin", "-e", "admin@admin.com", "-f", "admin", "-l", "admin"]
        env:
        - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              name: airflow-secret
              key: airflow-core-sql-alchemy-conn
      containers:
        - name: airflow-webserver
          image: ehddnr/airflow:1.1.0
          ports:
            - name: web
              containerPort: 8080
          env:
          - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
            valueFrom:
              secretKeyRef:
                name: airflow-secret
                key: airflow-core-sql-alchemy-conn
          volumeMounts:
            - mountPath: /opt/airflow/dags
              name: dags
            - mountPath: /opt/airflow/logs
              name: logs
            - mountPath: /opt/airflow/data
              name: data
          command: ["airflow"]
          args:
            - "webserver"
            - "--port"
            - "8080"
      volumes:
        - name: dags
          persistentVolumeClaim:
            claimName: airflow-dags-pvc  # 사용할 PVC 이름
        - name: logs
          persistentVolumeClaim:
            claimName: airflow-logs-pvc  # 사용할 PVC 이름
        - name: data
          persistentVolumeClaim:
            claimName: airflow-data-pvc  # 사용할 PVC 이름

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scheduler
  template:
    metadata:
      labels:
        app: scheduler
    spec:
      containers:
        - name: airflow-scheduler
          image: ehddnr/airflow:1.1.0
          env:
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              valueFrom:
                secretKeyRef:
                  name: airflow-secret
                  key: airflow-core-sql-alchemy-conn
            - name: MLFLOW_S3_ENDPOINT_URL
              valueFrom:
                secretKeyRef:
                  name: mlflow-secret
                  key: mlflow-s3-endpoint-url
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: mlflow-secret
                  key: aws-access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: mlflow-secret
                  key: aws-secret-access-key
          args:
            - scheduler
          volumeMounts:
            - mountPath: /opt/airflow/dags
              name: dags
            - mountPath: /opt/airflow/logs
              name: logs
      volumes:
        - name: dags
          persistentVolumeClaim:
            claimName: airflow-dags-pvc  # 사용할 PVC 이름
        - name: logs
          persistentVolumeClaim:
            claimName: airflow-logs-pvc  # 사용할 PVC 이름

---

apiVersion: v1
kind: Service
metadata:
  name: airflow-webserver-service
spec:
  type: NodePort
  selector:
    app: airflow-webserver
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30081

---

apiVersion: v1
kind: Service
metadata:
  name: airflow-scheduler
spec:
  selector:
    app: airflow-scheduler
  ports:
    - name: scheduler
      protocol: TCP
      port: 8793